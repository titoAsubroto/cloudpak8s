(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{"013z":function(e,t,a){"use strict";a("KKXr"),a("pIFo");var n=a("pOBw"),l=a("q1tI"),r=a.n(l),o=a("NmYn"),i=a.n(o),c=a("OKom"),s=a("k4MR"),p=a("TSYQ"),b=a.n(p),u=a("QH2O"),m=a("qKvR"),d=function(e){var t,a=e.title,n=e.tabs,l=void 0===n?[]:n;return Object(m.b)("div",{className:b()(u.pageHeader,(t={},t[u.withTabs]=l.length,t))},Object(m.b)("div",{className:"bx--grid"},Object(m.b)("div",{className:"bx--row"},Object(m.b)("div",{className:"bx--col-lg-12"},Object(m.b)("h1",{id:"page-title",className:u.text},a)))))},h=a("pEPl"),g=a("BAC9"),O=function(e){var t=e.relativePagePath,a=e.repository,n=h.data.site.siteMetadata.repository,l=a||n,r=l.baseUrl,o=l.subDirectory,i=r+"/edit/"+l.branch+o+"/src/pages"+t;return r?Object(m.b)("div",{className:"bx--row "+g.row},Object(m.b)("div",{className:"bx--col"},Object(m.b)("a",{className:g.link,href:i},"Edit this page on GitHub"))):null},f=a("FCXl"),j=(a("Oyvg"),a("Wbzz")),y=a("I8xM");var N=function(e){var t,a;function n(){return e.apply(this,arguments)||this}return a=e,(t=n).prototype=Object.create(a.prototype),t.prototype.constructor=t,t.__proto__=a,n.prototype.render=function(){var e=this.props,t=e.tabs,a=e.slug,n=a.split("/").filter(Boolean).slice(-1)[0],l=t.map((function(e){var t,l=i()(e,{lower:!0}),r=l===n,o=new RegExp(n+"(?!-)"),c=a.replace(o,l);return Object(m.b)("li",{key:e,className:b()((t={},t[y.selectedItem]=r,t),y.listItem)},Object(m.b)(j.Link,{className:y.link,to:""+c},e))}));return Object(m.b)("div",{className:y.tabsContainer},Object(m.b)("div",{className:"bx--grid"},Object(m.b)("div",{className:"bx--row"},Object(m.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(m.b)("nav",null,Object(m.b)("ul",{className:y.list},l))))))},n}(r.a.Component),v=a("MjG9");t.a=function(e){var t=e.pageContext,a=e.children,l=e.location,r=e.Title,o=t.frontmatter,p=void 0===o?{}:o,b=t.relativePagePath,u=t.titleType,h=p.tabs,g=p.title,j=p.theme,y=p.description,k=p.keywords,w=n.data.site.pathPrefix,x=w?l.pathname.replace(w,""):l.pathname,C=h?x.split("/").filter(Boolean).slice(-1)[0]||i()(h[0],{lower:!0}):"";return Object(m.b)(s.a,{tabs:h,homepage:!1,theme:j,pageTitle:g,pageDescription:y,pageKeywords:k,titleType:u},Object(m.b)(d,{title:r?Object(m.b)(r,null):g,label:"label",tabs:h}),h&&Object(m.b)(N,{slug:x,tabs:h,currentTab:C}),Object(m.b)(v.a,{padded:!0},a,Object(m.b)(O,{relativePagePath:b})),Object(m.b)(f.a,{pageContext:t,location:l,slug:x,tabs:h,currentTab:C}),Object(m.b)(c.a,null))}},WAMu:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return o})),a.d(t,"default",(function(){return s}));a("91GP"),a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("q1tI");var n=a("7ljp"),l=a("013z");a("qKvR");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var o={},i={_frontmatter:o},c=l.a;function s(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,["components"]);return Object(n.b)(c,r({},i,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"#setting-the-max_map_count"}),"Setting the max_map_count")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"#download-and-extract-the-image"}),"Download and extract the image")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"#creating-configyaml"}),"Creating config.yaml")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"#creating-getallrecsh"}),"Creating getAllRec.sh")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"#starting-the-install-process"}),"Starting the install process")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"#creating-the-correct-kubeconfig"}),"Creating the correct kubeconfig")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"#uninstalling-common-services"}),"Uninstalling Common Services"))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"NOTE: Make sure you have 200GB or more on your installer node. If you have less, then you can download the offline image, extract and delete the original file")),Object(n.b)("h2",null,"Setting the max_map_count"),Object(n.b)("p",null,"SSH into all your worker and storage nodes and set the max_map_count to 262144."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-bash"}),'sudo sysctl -w vm.max_map_count=262144\necho "vm.max_map_count=262144" | sudo tee -a /etc/sysctl.conf\n')),Object(n.b)("h2",null,"Download and extract the image"),Object(n.b)("p",null,"SSH into your installer node. Go to ",Object(n.b)("inlineCode",{parentName:"p"},"/opt")," dir and download the image there. Look at ",Object(n.b)("a",r({parentName:"p"},{href:"../pre-reqs"}),"Pre-requisites")," to learn how to get the offline image."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-bash"}),"cd /opt\nmkdir cp4ioffline\ntar xf ibm-cp-int-2019.4.1-offline.tar.gz --directory /opt/cp4ioffline\n")),Object(n.b)("p",null,"Now you can extract the images and load them into docker."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-bash"}),"cd cp4ioffline\ntar xvf installer_files/cluster/images/common-services-armonk-x86_64.tar.gz -O | sudo docker load\n")),Object(n.b)("p",null,"You can delete ",Object(n.b)("inlineCode",{parentName:"p"},"ibm-cp-int-2019.4.1-offline.tar.gz")," now if you’re low on space."),Object(n.b)("h2",null,"Creating config.yaml"),Object(n.b)("p",null,"Now you have to configure your ",Object(n.b)("inlineCode",{parentName:"p"},"cp4ioffline/installer_files/cluster/config.yaml"),". It is always a good idea to create a backup of the default ",Object(n.b)("inlineCode",{parentName:"p"},"cluster.yaml"),"."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"You can use your OpenShift master and infrastructure nodes here, or install these components to dedicated OpenShift compute nodes. You can specify more than one node for each type to build a high availability cluster. Use the command ",Object(n.b)("inlineCode",{parentName:"p"},"oc get nodes")," to obtain these values."),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",r({parentName:"pre"},{className:"language-yaml"}),"cluster_nodes:\nmaster:\n  - your-openshift-dedicated-node-to-deploy-icp-master-components\nproxy:\n  - your-openshift-dedicated-node-to-deploy-icp-proxy-components>\nmanagement:\n  - your-openshift-dedicated-node-to-deploy-icp-management-components>\n"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Set the default_admin_password. The password must meet the default password enforcement rule ’^(","[a-zA-Z0-9","-]","{32,})$’ . Optionally, you can define one or more rules as regular expressions in an array list that the password must pass. The rules are written as regular expressions that are supported by the Go programming language. To define a set of password rules, add the following parameter and values to the file:"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",r({parentName:"pre"},{className:"language-yaml"}),"  password_rules:\n  - '^.{10,}'\n  - '.*[!@#$%\\^&\\*].*'\n")),Object(n.b)("p",{parentName:"li"},"To disable the password_rule, add (.*)."),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",r({parentName:"pre"},{className:"language-yaml"}),"  password_rules:\n  - '(.*)'\n"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Finally, you’ll have define what capabilities you would like to install under ",Object(n.b)("inlineCode",{parentName:"p"},"archive_addons:"),". By default it installs all the capabilities. But depending on your requirements, you can pick and choose. For example defined below is a cluster with ",Object(n.b)("inlineCode",{parentName:"p"},"mq")," and ",Object(n.b)("inlineCode",{parentName:"p"},"tracing"),"\n",Object(n.b)("strong",{parentName:"p"},"Note: You must deploy ",Object(n.b)("inlineCode",{parentName:"strong"},"icp4i")," also referred to as common services, otherwise you can’t deploy any other capabilities")),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",r({parentName:"pre"},{className:"language-yaml"}),"  archive_addons:\n    icp4i:\n      namespace: integration\n      repo: local-charts\n      path: icp4icontent/IBM-Cloud-Pak-for-Integration-3.0.0.tgz\n      charts:\n        - name: ibm-icp4i-prod\n          values: {}\n    mq:\n      namespace: mq\n      repo: local-charts\n      path: icp4icontent/IBM-MQ-Advanced-for-IBM-Cloud-Pak-for-Integration-5.0.0.tgz\n    tracing:\n      namespace: tracing\n      repo: local-charts\n      path: icp4icontent/IBM-Cloud-Pak-for-Integration-Operations-Dashboard-1.0.1.tgz\n    \n \n")),Object(n.b)("p",{parentName:"li"},"Additionally, here is an example that deploys everything ",Object(n.b)("a",r({parentName:"p"},{href:"/assets/integration/utils/config.yaml"}),Object(n.b)("inlineCode",{parentName:"a"},"config.yaml"))))),Object(n.b)("h2",null,"Creating getAllRec.sh"),Object(n.b)("p",null,"When the installer fails, this script will echo all the pods that are up and running and pods that are failing."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-bash"}),"cd /opt\ntouch getAllRec.sh\nsudo chmod 755 getAllRec.sh\n")),Object(n.b)("p",null,"You can get the ",Object(n.b)("a",r({parentName:"p"},{href:"/assets/integration/utils/getAllRec.sh"}),Object(n.b)("inlineCode",{parentName:"a"},"getAllRec.sh"))," file from here."),Object(n.b)("p",null,"To run ",Object(n.b)("inlineCode",{parentName:"p"},"getAllRec.sh")," you need to pass in a namespace. Usually on a failed install, the ",Object(n.b)("inlineCode",{parentName:"p"},"kube-system")," namespace gives us the most information regarding the failure."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-bash"}),"./getAllRec.sh kube-system\n")),Object(n.b)("h2",null,"Creating the correct kubeconfig"),Object(n.b)("p",null,"First you have to copy our kubeconfig to the cluster directory. "),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-bash"}),"cd /opt/cp4ioffline/installer_files/cluster\noc config view --minify=true --flatten=true > kubeconfig\n")),Object(n.b)("p",null,"It should look similar to this. ",Object(n.b)("strong",{parentName:"p"},"Note:")," Make sure it has ",Object(n.b)("inlineCode",{parentName:"p"},"insecure-skip-tls-verify: true"),"config."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-yaml"}),"apiVersion: v1\nclusters:\n- cluster:\n    insecure-skip-tls-verify: true\n    server: https://api.mislam.ocp.csplab.local:6443\n  name: api-mislam-ocp-csplab-local:6443\ncontexts:\n- context:\n    cluster: api-mislam-ocp-csplab-local:6443\n    namespace: openshift-image-registry\n    user: kube:admin/api-mislam-ocp-csplab-local:6443\n  name: openshift-image-registry/api-mislam-ocp-csplab-local:6443/kube:admin\ncurrent-context: openshift-image-registry/api-mislam-ocp-csplab-local:6443/kube:admin\nkind: Config\npreferences: {}\nusers:\n- name: kube:admin/api-mislam-ocp-csplab-local:6443\n  user:\n    token: 3lg2U7vUcu-ovvsrK-sYDSWg3t5vLcBPY83DkvL44Is\n")),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Alternatively")," you can copy it from our Openshift Cluster Auth directory to here. "),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-bash"}),"cp /opt/myocpcluster/auth/kubeconfig /opt/cp4ioffline/installer_files/cluster\n")),Object(n.b)("h2",null,"Checking Docker Login"),Object(n.b)("p",null,"Run this command to see if you can login to docker "),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-bash"}),"sudo docker login $(oc registry info) -u kubeadmin -p $(oc whoami -t)\n")),Object(n.b)("h2",null,"Starting the install process"),Object(n.b)("p",null,"Now you run the installer. Notice it’s a nohup job (runs on the background) and the logs are written to ",Object(n.b)("inlineCode",{parentName:"p"},"install.log")," so you can close your terminal and leave but the installer will keep on going on the server. And log back in and look at ",Object(n.b)("inlineCode",{parentName:"p"},"install.log")," to see progress."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-bash"}),"nohup sudo docker run -t --net=host -e LICENSE=accept -v $(pwd):/installer/cluster:z -v /var/run:/var/run:z -v /etc/docker:/etc/docker:z --security-opt label:disable ibmcom/icp-inception-amd64:3.2.2 addon -vvv | tee install.log &\n")),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"NOTE: If the installer fails, run the getAllRec.sh script to check if common services is up or not. If it isn’t up, you can run the installer again. If it is up but one of the capabilities failed tyo get pushed, then that capability can be applied individually")," "),Object(n.b)("h2",null,"Uninstalling Common Services"),Object(n.b)("p",null,"In case the installer fails on the same step multiple times, it’s better to uninstall and try again. To uninstall"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-bash"}),"nohup sudo docker run -t --net=host -e LICENSE=accept -v $(pwd):/installer/cluster:z -v /var/run:/var/run:z -v /etc/docker:/etc/docker:z --security-opt label:disable ibmcom/icp-inception-amd64:3.2.2 uninstall-with-openshift | tee install.log &\n")))}s.isMDXComponent=!0},pEPl:function(e){e.exports=JSON.parse('{"data":{"site":{"siteMetadata":{"repository":{"baseUrl":"https://github.com/ibm-cloud-architecture/cloudpak8s","subDirectory":"/","branch":"master"}}}}}')},pOBw:function(e){e.exports=JSON.parse('{"data":{"site":{"pathPrefix":""}}}')}}]);
//# sourceMappingURL=component---src-pages-integration-onprem-offline-index-mdx-f670223bddbf99679fd7.js.map